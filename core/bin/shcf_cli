#!/bin/bash

## Adding sub-commands? Add in below block as this doubles
## as a help file for whole `shcf_cli'
##
##===================================================
##~usage: shcf_cli <cmd> [<cmd_params>]
##~where:
##~  * cmd        - Command supported, see below.
##~  * cmd_params - Depends on command. See below.
##~
##~ Command specific parameters:
##~   new       requires <project_name>
##~   bin       requires <project_name> <script_name>
##~   lib       requires <project_name> <lib_name>
##~   getlib    requires <project_name> <lib_name>
##~   projects  <no_parameter>
##~
##~ For usage per command, use 'shcf_cli help <cmd>'
##~
##===================================================

## Are you asking to initialize environment?
## TODO: Check if this block can be implemented better
[[ "init" = "$1" ]] && {
  tmp_platform_root=$(dirname $(dirname $0))                              ## outside run, e.g ./shcf/core/bin/shcf_cli init
  [[ '.' = "$tmp_platform_root" ]] && tmp_platform_root=$(dirname $(pwd)) ## inside run, e.g ./shcf_cli init
  . $tmp_platform_root/lib/create_init.bash.inc
  create_init $*
  exit 0
}

# Otherwise, ensure environment has been set:
#
[[ -z $SHCF_PLATFORM_ROOT ]] && { echo "[ERROR] SHCF environment not set. Run './shcf_cli init'"; exit 1; }

# source framework orchestrator
#
. $SHCF_PLATFORM_ROOT/etc/controller.bash.inc

# list of functions to auto-load
#
function_to_autoload="
case_shift
create_bin
create_help
create_lib
create_namespace
create_new
error_message
usage
create_projects
create_getlib
"
autoload_functions "$function_to_autoload"

# shcf_cli parameters. Parameters 2 & 3 depends on $cmd need,
# hence, the notation. Clarificatory declarations in respective
# command sections.
#
cmd=$(case_shift down $1)
_p2=$2
_p3=$3

# --------------------------------------------------
# tool main()
#
# supported sub-commands:
#  new      - to create a new shcf-based shell project
#  bin      - creation of new 'bin' scripts
#  lib      - creation of skeleton lib to a project
#  getlib   - pulling in new external lib to a project
#  help     - shows the usage per command
#  projects - list of projects
# --------------------------------------------------

# For use in help files
main_cmd=$($BASENAME_BIN $0)

# Define common usage of shcf_cli parameter(s).
# Override in respective sub-command as needed
#
project=$_p2
new_entity=$_p3

# Now, start selection of sub-commands
#
case $cmd in
  "new")
    create_new $project
  ;;
  "lib")
    create_lib $project $new_entity
  ;;
  "bin")
    create_bin $project $new_entity
  ;;
  "help")
    create_help $_p2
  ;;
  "projects")
    create_projects
  ;;
  "getlib")
    create_getlib $project $new_entity
  ;;
  *)
    err_msg="ERROR: Unsupported command ($cmd)"
    [[ $# -eq 0 ]] && err_msg='ERROR: input parameter(s) missing!'
    echo $err_msg; usage
  ;;
esac
